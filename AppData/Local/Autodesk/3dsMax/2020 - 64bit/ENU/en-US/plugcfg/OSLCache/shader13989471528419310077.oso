OpenShadingLanguage 1.00
# Compiled by oslc 1.10.2
# options: -IC:/Program Files/Autodesk/3ds Max 2020/OSL/
shader Rivets	%meta{string,help,"Adds rivets along the edges of UV space 1x1 squares, as<br/>well as bending the squares for Steam-Punky un-evenness"} 
param	point	UVW	0 0 0		%meta{string,help,"The position to shade. Default to the standard UV space."}  %read{2,2} %write{0,0} %initexpr
param	float	Scale	0.5		%read{2,2} %write{2147483647,-1}
param	int	U_Rivets	6		%read{79,100} %write{2147483647,-1}
param	int	V_Rivets	6		%read{82,106} %write{2147483647,-1}
param	float	RivetRadius	0.30000001		%read{1,1} %write{2147483647,-1}
param	float	Dirt	0.1		%read{137,141} %write{2147483647,-1}
param	int	Seed	0		%read{10,88} %write{2147483647,-1}
param	color	PlateColor	0.5 0.69999999 0.5		%read{45,45} %write{2147483647,-1}
param	color	RivetColor	0.69999999 0.30000001 0.1		%read{135,135} %write{2147483647,-1}
param	color	DirtColor	0.1 0.1 0.1		%read{143,143} %write{2147483647,-1}
param	color	SpaceColor	0.079999998 0.039999999 0.0099999998		%read{42,42} %write{2147483647,-1}
param	color	HoleColor	0.02 0.02 0.02		%read{156,156} %write{2147483647,-1}
param	vector	RivetCenter	0.5 0.5 0		%read{121,121} %write{2147483647,-1}
param	vector	RivetRandom	0 0 0		%read{120,120} %write{2147483647,-1}
param	float	RivetProbability	1		%read{115,115} %write{2147483647,-1}
param	float	HoleRadius	0.1		%read{145,154} %write{2147483647,-1}
param	float	HoleEdge	0.02		%read{145,149} %write{2147483647,-1}
param	float	BumpAmount	2		%read{134,134} %write{2147483647,-1}
param	float	BumpShape	0.25		%read{133,133} %write{2147483647,-1}
param	float	PlateGap	0.0099999998		%read{20,71} %write{2147483647,-1}
param	float	PlateEdge	0.02		%read{53,70} %write{2147483647,-1}
param	vector	PlateWobble	0 0 0		%read{16,75} %write{2147483647,-1}
param	vector	WobbleScale	1 1 1		%read{13,13} %write{2147483647,-1}
param	int	RivetWobble	1		%meta{string,widget,"checkBox"} %meta{string,label,"Rivets follow plate wobble"} %meta{string,help,"If enabed, rivets will follow the warped space of the plates"}  %read{74,74} %write{2147483647,-1}
oparam	color	Col	0 0 0		%read{143,144} %write{42,156}
oparam	float	RivetFac	0		%read{2147483647,-1} %write{136,157}
oparam	float	HoleFac	0		%read{2147483647,-1} %write{158,158}
oparam	float	PlateFac	0		%read{55,159} %write{43,153}
oparam	float	Dist	0		%read{130,130} %write{123,123}
oparam	float	Bump	0		%read{159,159} %write{134,159}
oparam	int	TileIdx	0		%read{111,111} %write{89,89}
oparam	int	PlateIdx	0		%read{2147483647,-1} %write{44,73}
global	float	u	%read{0,0} %write{2147483647,-1}
global	float	v	%read{0,0} %write{2147483647,-1}
local	float	RR	%read{123,140} %write{1,1}
local	point	p	%read{3,81} %write{2,77}
local	int	plateIdx	%read{14,73} %write{11,11}
local	point	modP	%read{13,67} %write{12,18}
local	vector	wob	%read{17,76} %write{15,15}
local	float	rivetu	%read{84,117} %write{80,80}
local	float	rivetv	%read{85,118} %write{83,83}
local	int	rcU	%read{87,101} %write{84,90}
local	int	rcV	%read{86,107} %write{85,91}
local	vector	___324_rnd	%read{114,120} %write{113,116}
local	int	___324_doit	%read{127,127} %write{115,115}
local	point	___324_rp	%read{122,122} %write{119,119}
local	point	___324_rc	%read{122,122} %write{121,121}
local	float	___324_dist	%read{123,154} %write{122,122}
local	float	___326_da	%read{144,144} %write{142,142}
const	int	$const1	0		%read{3,127} %write{2147483647,-1}
const	float	$const2	0		%read{0,152} %write{2147483647,-1}
const	float	$const3	2		%read{1,1} %write{2147483647,-1}
temp	int	$tmp1	%read{5,5} %write{4,4}
temp	float	$tmp2	%read{4,4} %write{3,3}
const	int	$const4	13		%read{5,5} %write{2147483647,-1}
temp	int	$tmp3	%read{9,9} %write{5,5}
temp	int	$tmp4	%read{8,8} %write{7,7}
const	int	$const5	1		%read{6,106} %write{2147483647,-1}
temp	float	$tmp5	%read{7,7} %write{6,6}
const	int	$const6	32		%read{8,8} %write{2147483647,-1}
temp	int	$tmp6	%read{9,9} %write{8,8}
temp	int	$tmp7	%read{11,11} %write{9,9}
const	int	$const7	115		%read{10,10} %write{2147483647,-1}
temp	int	$tmp8	%read{11,11} %write{10,10}
const	point	$const8	1 1 1		%read{12,12} %write{2147483647,-1}
const	string	$const9	"perlin"		%read{15,15} %write{2147483647,-1}
temp	point	$tmp10	%read{15,15} %write{13,13}
temp	float	$tmp11	%read{15,15} %write{14,14}
const	float	$const10	10		%read{16,75} %write{2147483647,-1}
temp	vector	$tmp12	%read{17,17} %write{16,16}
temp	vector	$tmp13	%read{18,18} %write{17,17}
temp	float	$tmp14	%read{20,20} %write{19,19}
temp	int	$tmp15	%read{21,21} %write{20,20}
temp	int	$tmp16	%read{22,28} %write{21,27}
const	float	$const11	1		%read{24,158} %write{2147483647,-1}
temp	float	$tmp17	%read{24,24} %write{23,23}
temp	float	$tmp18	%read{25,25} %write{24,24}
temp	int	$tmp19	%read{26,26} %write{25,25}
temp	int	$tmp20	%read{27,27} %write{26,26}
temp	int	$tmp21	%read{29,34} %write{28,33}
temp	float	$tmp22	%read{31,31} %write{30,30}
temp	int	$tmp23	%read{32,32} %write{31,31}
temp	int	$tmp24	%read{33,33} %write{32,32}
temp	int	$tmp25	%read{35,41} %write{34,40}
temp	float	$tmp26	%read{37,37} %write{36,36}
temp	float	$tmp27	%read{38,38} %write{37,37}
temp	int	$tmp28	%read{39,39} %write{38,38}
temp	int	$tmp29	%read{40,40} %write{39,39}
const	int	$const12	2		%read{46,116} %write{2147483647,-1}
temp	float	$tmp30	%read{48,48} %write{46,46}
temp	float	$tmp31	%read{48,48} %write{47,47}
temp	float	$tmp32	%read{49,49} %write{48,48}
const	float	$const13	5		%read{49,49} %write{2147483647,-1}
temp	float	$tmp33	%read{50,50} %write{49,49}
temp	float	$tmp34	%read{55,55} %write{54,54}
temp	float	$tmp35	%read{54,54} %write{51,51}
const	string	$const14	"edgeTweak"		%read{52,69} %write{2147483647,-1}
temp	float	$tmp36	%read{54,54} %write{53,53}
temp	float	$tmp37	%read{60,60} %write{59,59}
temp	float	$tmp38	%read{59,59} %write{56,56}
temp	float	$tmp39	%read{59,59} %write{58,58}
temp	float	$tmp40	%read{66,66} %write{65,65}
temp	float	$tmp41	%read{62,62} %write{61,61}
temp	float	$tmp42	%read{65,65} %write{62,62}
temp	float	$tmp43	%read{65,65} %write{64,64}
temp	float	$tmp44	%read{72,72} %write{71,71}
temp	float	$tmp45	%read{68,68} %write{67,67}
temp	float	$tmp46	%read{71,71} %write{68,68}
temp	float	$tmp47	%read{71,71} %write{70,70}
temp	vector	$tmp48	%read{76,76} %write{75,75}
temp	vector	$tmp49	%read{77,77} %write{76,76}
temp	float	$tmp50	%read{80,80} %write{78,78}
temp	float	$tmp51	%read{80,80} %write{79,79}
temp	float	$tmp52	%read{83,83} %write{81,81}
temp	float	$tmp53	%read{83,83} %write{82,82}
const	int	$const15	100		%read{86,86} %write{2147483647,-1}
temp	int	$tmp54	%read{87,87} %write{86,86}
temp	int	$tmp55	%read{89,89} %write{87,87}
const	int	$const16	50		%read{88,88} %write{2147483647,-1}
temp	int	$tmp56	%read{89,89} %write{88,88}
temp	int	$tmp57	%read{93,93} %write{92,92}
temp	int	$tmp58	%read{94,98} %write{93,97}
temp	int	$tmp59	%read{96,96} %write{95,95}
temp	int	$tmp60	%read{97,97} %write{96,96}
temp	int	$tmp61	%read{99,104} %write{98,103}
temp	int	$tmp62	%read{101,101} %write{100,100}
temp	int	$tmp63	%read{102,102} %write{101,101}
temp	int	$tmp64	%read{103,103} %write{102,102}
temp	int	$tmp65	%read{105,110} %write{104,109}
temp	int	$tmp66	%read{107,107} %write{106,106}
temp	int	$tmp67	%read{108,108} %write{107,107}
temp	int	$tmp68	%read{109,109} %write{108,108}
temp	vector	$tmp69	%read{113,113} %write{112,112}
const	string	$const17	"cell"		%read{112,112} %write{2147483647,-1}
temp	float	$tmp70	%read{112,112} %write{111,111}
const	vector	$const18	0.5 0.5 0		%read{113,113} %write{2147483647,-1}
temp	float	$tmp72	%read{115,115} %write{114,114}
temp	float	$tmp73	%read{119,119} %write{117,117}
temp	float	$tmp74	%read{119,119} %write{118,118}
temp	vector	$tmp75	%read{121,121} %write{120,120}
temp	int	$tmp76	%read{125,125} %write{124,124}
temp	int	$tmp77	%read{126,129} %write{125,128}
temp	int	$tmp78	%read{128,128} %write{127,127}
temp	float	$tmp79	%read{134,134} %write{133,133}
temp	float	$tmp80	%read{133,133} %write{132,132}
temp	float	$tmp81	%read{131,131} %write{130,130}
const	float	$const19	1.5		%read{131,131} %write{2147483647,-1}
temp	float	$tmp82	%read{132,132} %write{131,131}
temp	float	$tmp83	%read{138,138} %write{137,137}
temp	int	$tmp84	%read{139,139} %write{138,138}
temp	float	$tmp85	%read{141,141} %write{140,140}
temp	float	$tmp86	%read{142,142} %write{141,141}
temp	color	$tmp87	%read{144,144} %write{143,143}
temp	float	$tmp88	%read{146,146} %write{145,145}
temp	int	$tmp89	%read{147,147} %write{146,146}
temp	float	$tmp90	%read{153,153} %write{152,152}
temp	float	$tmp91	%read{149,149} %write{148,148}
temp	float	$tmp92	%read{151,151} %write{149,149}
const	string	$const20	"clamp"		%read{150,150} %write{2147483647,-1}
temp	float	$tmp93	%read{152,152} %write{151,151}
temp	int	$tmp94	%read{155,155} %write{154,154}
code UVW
# OSL\Rivets.osl:17
# 		[[ string help="The position to shade. Default to the standard UV space." ]],
	vector		UVW u v $const2 	%filename{"OSL\Rivets.osl"} %line{17} %argrw{"wrrr"}
code ___main___
# OSL\Rivets.osl:62
# 	point p  = UVW / Scale;
	div		RR RivetRadius $const3 	%filename{"OSL\Rivets.osl"} %line{62} %argrw{"wrr"}
# OSL\Rivets.osl:63
# 
	div		p UVW Scale 	%line{63} %argrw{"wrr"}
# OSL\Rivets.osl:67
# 
	compref		$tmp2 p $const1 	%line{67} %argrw{"wrr"}
	assign		$tmp1 $tmp2 	%argrw{"wr"}
	mul		$tmp3 $tmp1 $const4 	%argrw{"wrr"}
	compref		$tmp5 p $const5 	%argrw{"wrr"}
	assign		$tmp4 $tmp5 	%argrw{"wr"}
	mul		$tmp6 $tmp4 $const6 	%argrw{"wrr"}
	add		$tmp7 $tmp3 $tmp6 	%argrw{"wrr"}
	mul		$tmp8 $const7 Seed 	%argrw{"wrr"}
	add		plateIdx $tmp7 $tmp8 	%argrw{"wrr"}
# OSL\Rivets.osl:71
# 
	fmod		modP p $const8 	%line{71} %argrw{"wrr"}
# OSL\Rivets.osl:74
# 	
	div		$tmp10 modP WobbleScale 	%line{74} %argrw{"wrr"}
	assign		$tmp11 plateIdx 	%argrw{"wr"}
	noise		wob $const9 $tmp10 $tmp11 	%argrw{"wrrr"}
# OSL\Rivets.osl:76
# 	
	div		$tmp12 PlateWobble $const10 	%line{76} %argrw{"wrr"}
	mul		$tmp13 $tmp12 wob 	%argrw{"wrr"}
	add		modP modP $tmp13 	%argrw{"wrr"}
# OSL\Rivets.osl:79
# 		modP[1] < PlateGap || 1.0 - modP[1] < PlateGap)
	compref		$tmp14 modP $const1 	%line{79} %argrw{"wrr"}
	lt		$tmp15 $tmp14 PlateGap 	%argrw{"wrr"}
	neq		$tmp16 $tmp15 $const1 	%argrw{"wrr"}
	if		$tmp16 23 28 	%argrw{"r"}
	compref		$tmp17 modP $const1 	%argrw{"wrr"}
	sub		$tmp18 $const11 $tmp17 	%argrw{"wrr"}
	lt		$tmp19 $tmp18 PlateGap 	%argrw{"wrr"}
	neq		$tmp20 $tmp19 $const1 	%argrw{"wrr"}
	assign		$tmp16 $tmp20 	%argrw{"wr"}
	neq		$tmp21 $tmp16 $const1 	%argrw{"wrr"}
	if		$tmp21 30 34 	%argrw{"r"}
# OSL\Rivets.osl:80
# 	{
	compref		$tmp22 modP $const5 	%line{80} %argrw{"wrr"}
	lt		$tmp23 $tmp22 PlateGap 	%argrw{"wrr"}
	neq		$tmp24 $tmp23 $const1 	%argrw{"wrr"}
# OSL\Rivets.osl:79
# 		modP[1] < PlateGap || 1.0 - modP[1] < PlateGap)
	assign		$tmp21 $tmp24 	%line{79} %argrw{"wr"}
	neq		$tmp25 $tmp21 $const1 	%argrw{"wrr"}
# OSL\Rivets.osl:80
# 	{
	if		$tmp25 36 41 	%line{80} %argrw{"r"}
	compref		$tmp26 modP $const5 	%argrw{"wrr"}
	sub		$tmp27 $const11 $tmp26 	%argrw{"wrr"}
	lt		$tmp28 $tmp27 PlateGap 	%argrw{"wrr"}
	neq		$tmp29 $tmp28 $const1 	%argrw{"wrr"}
	assign		$tmp25 $tmp29 	%argrw{"wr"}
# OSL\Rivets.osl:79
# 		modP[1] < PlateGap || 1.0 - modP[1] < PlateGap)
	if		$tmp25 45 74 	%line{79} %argrw{"r"}
# OSL\Rivets.osl:83
# 		PlateFac = 0.0;
	assign		Col SpaceColor 	%line{83} %argrw{"wr"}
# OSL\Rivets.osl:84
# 		PlateIdx = 0;
	assign		PlateFac $const2 	%line{84} %argrw{"wr"}
# OSL\Rivets.osl:85
# 	}
	assign		PlateIdx $const1 	%line{85} %argrw{"wr"}
# OSL\Rivets.osl:90
# 		PlateFac = 1.0 + PlateWobble[2] * wob[2] * 5.0;
	assign		Col PlateColor 	%line{90} %argrw{"wr"}
# OSL\Rivets.osl:91
# 		
	compref		$tmp30 PlateWobble $const12 	%line{91} %argrw{"wrr"}
	compref		$tmp31 wob $const12 	%argrw{"wrr"}
	mul		$tmp32 $tmp30 $tmp31 	%argrw{"wrr"}
	mul		$tmp33 $tmp32 $const13 	%argrw{"wrr"}
	add		PlateFac $const11 $tmp33 	%argrw{"wrr"}
# OSL\Rivets.osl:96
# 		PlateFac *= edgeTweak(PlateGap, PlateEdge, modP[1]);		
	compref		$tmp35 modP $const1 	%line{96} %argrw{"wrr"}
	functioncall	$const14 55 	%argrw{"r"}
# OSL\Rivets.osl:10
# }
	add		$tmp36 PlateGap PlateEdge 	%line{10} %argrw{"wrr"}
	smoothstep	$tmp34 PlateGap $tmp36 $tmp35 	%argrw{"wrrr"}
# OSL\Rivets.osl:96
# 		PlateFac *= edgeTweak(PlateGap, PlateEdge, modP[1]);		
	mul		PlateFac PlateFac $tmp34 	%line{96} %argrw{"wrr"}
# OSL\Rivets.osl:97
# 		PlateFac *= edgeTweak(PlateGap, PlateEdge, 1.0 - modP[0]);
	compref		$tmp38 modP $const5 	%line{97} %argrw{"wrr"}
	functioncall	$const14 60 	%argrw{"r"}
# OSL\Rivets.osl:10
# }
	add		$tmp39 PlateGap PlateEdge 	%line{10} %argrw{"wrr"}
	smoothstep	$tmp37 PlateGap $tmp39 $tmp38 	%argrw{"wrrr"}
# OSL\Rivets.osl:97
# 		PlateFac *= edgeTweak(PlateGap, PlateEdge, 1.0 - modP[0]);
	mul		PlateFac PlateFac $tmp37 	%line{97} %argrw{"wrr"}
# OSL\Rivets.osl:98
# 		PlateFac *= edgeTweak(PlateGap, PlateEdge, 1.0 - modP[1]);
	compref		$tmp41 modP $const1 	%line{98} %argrw{"wrr"}
	sub		$tmp42 $const11 $tmp41 	%argrw{"wrr"}
	functioncall	$const14 66 	%argrw{"r"}
# OSL\Rivets.osl:10
# }
	add		$tmp43 PlateGap PlateEdge 	%line{10} %argrw{"wrr"}
	smoothstep	$tmp40 PlateGap $tmp43 $tmp42 	%argrw{"wrrr"}
# OSL\Rivets.osl:98
# 		PlateFac *= edgeTweak(PlateGap, PlateEdge, 1.0 - modP[1]);
	mul		PlateFac PlateFac $tmp40 	%line{98} %argrw{"wrr"}
# OSL\Rivets.osl:99
# 		
	compref		$tmp45 modP $const5 	%line{99} %argrw{"wrr"}
	sub		$tmp46 $const11 $tmp45 	%argrw{"wrr"}
	functioncall	$const14 72 	%argrw{"r"}
# OSL\Rivets.osl:10
# }
	add		$tmp47 PlateGap PlateEdge 	%line{10} %argrw{"wrr"}
	smoothstep	$tmp44 PlateGap $tmp47 $tmp46 	%argrw{"wrrr"}
# OSL\Rivets.osl:99
# 		
	mul		PlateFac PlateFac $tmp44 	%line{99} %argrw{"wrr"}
# OSL\Rivets.osl:101
# 	}
	assign		PlateIdx plateIdx 	%line{101} %argrw{"wr"}
# OSL\Rivets.osl:105
# 		p += (PlateWobble / 10.0) * wob;
	if		RivetWobble 78 78 	%line{105} %argrw{"r"}
# OSL\Rivets.osl:106
# 	
	div		$tmp48 PlateWobble $const10 	%line{106} %argrw{"wrr"}
	mul		$tmp49 $tmp48 wob 	%argrw{"wrr"}
	add		p p $tmp49 	%argrw{"wrr"}
# OSL\Rivets.osl:109
# 	float rivetv = p[1] * V_Rivets;
	compref		$tmp50 p $const1 	%line{109} %argrw{"wrr"}
	assign		$tmp51 U_Rivets 	%argrw{"wr"}
	mul		rivetu $tmp50 $tmp51 	%argrw{"wrr"}
# OSL\Rivets.osl:110
# 	
	compref		$tmp52 p $const5 	%line{110} %argrw{"wrr"}
	assign		$tmp53 V_Rivets 	%argrw{"wr"}
	mul		rivetv $tmp52 $tmp53 	%argrw{"wrr"}
# OSL\Rivets.osl:113
# 	int   rcV = int(rivetv);
	assign		rcU rivetu 	%line{113} %argrw{"wr"}
# OSL\Rivets.osl:114
# 
	assign		rcV rivetv 	%line{114} %argrw{"wr"}
# OSL\Rivets.osl:117
# 	
	mul		$tmp54 rcV $const15 	%line{117} %argrw{"wrr"}
	add		$tmp55 rcU $tmp54 	%argrw{"wrr"}
	mul		$tmp56 $const16 Seed 	%argrw{"wrr"}
	add		TileIdx $tmp55 $tmp56 	%argrw{"wrr"}
# OSL\Rivets.osl:120
# 	rcV = rcV % V_Rivets;
	mod		rcU rcU U_Rivets 	%line{120} %argrw{"wrr"}
# OSL\Rivets.osl:121
# 
	mod		rcV rcV V_Rivets 	%line{121} %argrw{"wrr"}
# OSL\Rivets.osl:124
# 	    rcU == U_Rivets-1 || rcV == V_Rivets-1)
	eq		$tmp57 rcU $const1 	%line{124} %argrw{"wrr"}
	neq		$tmp58 $tmp57 $const1 	%argrw{"wrr"}
	if		$tmp58 95 98 	%argrw{"r"}
	eq		$tmp59 rcV $const1 	%argrw{"wrr"}
	neq		$tmp60 $tmp59 $const1 	%argrw{"wrr"}
	assign		$tmp58 $tmp60 	%argrw{"wr"}
	neq		$tmp61 $tmp58 $const1 	%argrw{"wrr"}
	if		$tmp61 100 104 	%argrw{"r"}
# OSL\Rivets.osl:125
# 	{
	sub		$tmp62 U_Rivets $const5 	%line{125} %argrw{"wrr"}
	eq		$tmp63 rcU $tmp62 	%argrw{"wrr"}
	neq		$tmp64 $tmp63 $const1 	%argrw{"wrr"}
# OSL\Rivets.osl:124
# 	    rcU == U_Rivets-1 || rcV == V_Rivets-1)
	assign		$tmp61 $tmp64 	%line{124} %argrw{"wr"}
	neq		$tmp65 $tmp61 $const1 	%argrw{"wrr"}
# OSL\Rivets.osl:125
# 	{
	if		$tmp65 106 110 	%line{125} %argrw{"r"}
	sub		$tmp66 V_Rivets $const5 	%argrw{"wrr"}
	eq		$tmp67 rcV $tmp66 	%argrw{"wrr"}
	neq		$tmp68 $tmp67 $const1 	%argrw{"wrr"}
	assign		$tmp65 $tmp68 	%argrw{"wr"}
# OSL\Rivets.osl:124
# 	    rcU == U_Rivets-1 || rcV == V_Rivets-1)
	if		$tmp65 159 159 	%line{124} %argrw{"r"}
# OSL\Rivets.osl:128
# 		int    doit = rnd[2] < RivetProbability;
	assign		$tmp70 TileIdx 	%line{128} %argrw{"wr"}
	noise		$tmp69 $const17 $tmp70 	%argrw{"wrr"}
	sub		___324_rnd $tmp69 $const18 	%argrw{"wrr"}
# OSL\Rivets.osl:129
# 		rnd[2] = 0;
	compref		$tmp72 ___324_rnd $const12 	%line{129} %argrw{"wrr"}
	lt		___324_doit $tmp72 RivetProbability 	%argrw{"wrr"}
# OSL\Rivets.osl:130
# 		
	compassign	___324_rnd $const12 $const1 	%line{130} %argrw{"wrr"}
# OSL\Rivets.osl:132
# 		point rc = RivetCenter + RivetRandom * rnd;
	fmod		$tmp73 rivetu $const11 	%line{132} %argrw{"wrr"}
	fmod		$tmp74 rivetv $const11 	%argrw{"wrr"}
	point		___324_rp $tmp73 $tmp74 $const2 	%argrw{"wrrr"}
# OSL\Rivets.osl:133
# 		
	mul		$tmp75 RivetRandom ___324_rnd 	%line{133} %argrw{"wrr"}
	add		___324_rc RivetCenter $tmp75 	%argrw{"wrr"}
# OSL\Rivets.osl:135
# 		Dist = dist / RR;		
	distance	___324_dist ___324_rp ___324_rc 	%line{135} %argrw{"wrr"}
# OSL\Rivets.osl:136
# 		
	div		Dist ___324_dist RR 	%line{136} %argrw{"wrr"}
# OSL\Rivets.osl:140
# 		{		
	lt		$tmp76 ___324_dist RR 	%line{140} %argrw{"wrr"}
	neq		$tmp77 $tmp76 $const1 	%argrw{"wrr"}
	if		$tmp77 129 129 	%argrw{"r"}
	neq		$tmp78 ___324_doit $const1 	%argrw{"wrr"}
	assign		$tmp77 $tmp78 	%argrw{"wr"}
	if		$tmp77 137 159 	%argrw{"r"}
# OSL\Rivets.osl:142
# 			Col      = RivetColor;
	sub		$tmp81 $const11 Dist 	%line{142} %argrw{"wrr"}
	mul		$tmp82 $tmp81 $const19 	%argrw{"wrr"}
	sin		$tmp80 $tmp82 	%argrw{"wr"}
	pow		$tmp79 $tmp80 BumpShape 	%argrw{"wrr"}
	mul		Bump $tmp79 BumpAmount 	%argrw{"wrr"}
# OSL\Rivets.osl:143
# 			RivetFac = 1.0;
	assign		Col RivetColor 	%line{143} %argrw{"wr"}
# OSL\Rivets.osl:144
# 		}
	assign		RivetFac $const11 	%line{144} %argrw{"wr"}
# OSL\Rivets.osl:146
# 		{
	add		$tmp83 RR Dirt 	%line{146} %argrw{"wrr"}
	lt		$tmp84 ___324_dist $tmp83 	%argrw{"wrr"}
	if		$tmp84 159 159 	%argrw{"r"}
# OSL\Rivets.osl:148
# 			Col = mix(DirtColor * Col, Col, da);
	sub		$tmp85 ___324_dist RR 	%line{148} %argrw{"wrr"}
	div		$tmp86 $tmp85 Dirt 	%argrw{"wrr"}
	smoothstep	___326_da $const2 $const11 $tmp86 	%argrw{"wrrr"}
# OSL\Rivets.osl:149
# 			
	mul		$tmp87 DirtColor Col 	%line{149} %argrw{"wrr"}
	mix		Col $tmp87 Col ___326_da 	%argrw{"wrrr"}
# OSL\Rivets.osl:151
# 			{
	add		$tmp88 HoleRadius HoleEdge 	%line{151} %argrw{"wrr"}
	lt		$tmp89 ___324_dist $tmp88 	%argrw{"wrr"}
	if		$tmp89 159 159 	%argrw{"r"}
# OSL\Rivets.osl:153
# 				if (dist < HoleRadius)
	sub		$tmp91 ___324_dist HoleRadius 	%line{153} %argrw{"wrr"}
	div		$tmp92 $tmp91 HoleEdge 	%argrw{"wrr"}
	functioncall	$const20 153 	%argrw{"r"}
# C:/Program Files\Autodesk\3ds Max 2020\OSL\stdosl.h:163
# float  clamp (float x, float minval, float maxval) { return max(min(x,maxval),minval); }
	min		$tmp93 $tmp92 $const11 	%filename{"C:/Program Files\Autodesk\3ds Max 2020\OSL\stdosl.h"} %line{163} %argrw{"wrr"}
	max		$tmp90 $tmp93 $const2 	%argrw{"wrr"}
# OSL\Rivets.osl:153
# 				if (dist < HoleRadius)
	mul		PlateFac PlateFac $tmp90 	%filename{"OSL\Rivets.osl"} %line{153} %argrw{"wrr"}
# OSL\Rivets.osl:154
# 				{
	lt		$tmp94 ___324_dist HoleRadius 	%line{154} %argrw{"wrr"}
	if		$tmp94 159 159 	%argrw{"r"}
# OSL\Rivets.osl:156
# 					RivetFac = 1.0;
	assign		Col HoleColor 	%line{156} %argrw{"wr"}
# OSL\Rivets.osl:157
# 					HoleFac  = 1.0;
	assign		RivetFac $const11 	%line{157} %argrw{"wr"}
# OSL\Rivets.osl:158
# 				}
	assign		HoleFac $const11 	%line{158} %argrw{"wr"}
# OSL\Rivets.osl:165
# }
	add		Bump Bump PlateFac 	%line{165} %argrw{"wrr"}
	end
